package Main;


import java.io.*;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Collector;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;

public class Main {
    public volatile static boolean stop1 = true;
    public static FileOutputStream fos;
    public static InputStream inputStream=null;

    public static void main(String[] args) throws InterruptedException, IOException {
        fos = new FileOutputStream("alex.txt");
        //modulateMessage(args[0],Long.parseLong(args[1]));
        asBinarySequence("")
        modulate1Bits(10);
        modulate0Bits(2000);
        modulateMessage("0323539577_0204508477",2000);

        fos.close();
        try {
            Files.deleteIfExists(Paths.get("alex.txt"));
        } catch (IOException e) {
            e.printStackTrace();
        }


    }

    public static void modulate1Bits(long window) throws InterruptedException {
        long x=System.currentTimeMillis();
        long endTime=(System.currentTimeMillis()+window);
        long safeTime=(System.currentTimeMillis()+window)/4;

        //while (System.currentTimeMillis()-safeTime<0);
        Timer t1 = new Timer();
        t1.schedule(new TimerTask() {
            @Override
            public void run() {
                stop1 = false;
            }
        }, window/2);
        while (stop1) {
           //try {
           //    URL website = new URL("https://tools.ietf.org/rfc/rfc1918.txt");
           //    ReadableByteChannel rbc = Channels.newChannel(website.openStream());
           //    fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
           //} catch (IOException e) {
           //    e.printStackTrace();
           //}
            URL url= null;
            try {
                url = new URL("https://www.ynet.co.il/home/0,7340,L-8,00.html");

                InputStream inputStream=url.openStream();
                inputStream.close();

            } catch (IOException e) {
                e.printStackTrace();
            }
            catch (Exception e){
                e.printStackTrace();
            }

        }

        stop1=true;
        t1.cancel();
        t1.purge();
        //while (System.currentTimeMillis()-endTime<0);
        try {
            Thread.sleep(x+window-System.currentTimeMillis());
        }
        catch (Exception e){}

        System.out.println(System.currentTimeMillis()-endTime);
    }

    public static void modulate0Bits(long window) {
        try {
            Thread.sleep(window);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void modulateMessage(String message, long window) throws InterruptedException {
        int[] binarySequence = asBinarySequence(message);
        for(int i=0;i<binarySequence.length;i++){
            if(binarySequence[i]==0)
                modulate0Bits(window);
            else
                modulate1Bits(window);

        }

    }

    private static int[] asBinarySequence(String message) {
        byte[] bytes = message.getBytes();
        StringBuilder binary = new StringBuilder();
        List<Integer> binary_num=new ArrayList<>();
        for (byte b : bytes)
        {
            int val = b;
            for (int i = 0; i < 8; i++)
            {
                binary_num.add((val & 128) == 0 ? 0 : 1);
                val <<= 1;
            }
        }
        int[] returnArr=new int[binary_num.size()];
        int k=0;
        for (Integer i:binary_num) {
            returnArr[k]=i;
            k++;
        }
        return returnArr;
    }
}
